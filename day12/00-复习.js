/**
 *  jsx: 在js中直接写标签. 通过babel将jsx编译成浏览器认识的代码
 *
 *  let div = <div></div>
 *
 *  在jsx中动态的插入数据: 使用了插值表达式 {}
 *
 *  在jsx的插值表达式中,可以传入js表达式, 但是直接渲染的:
 *
 *  字符串, 数字, 数组
 *
 *  可以传入,但是不能直接渲染的: 布尔, 对象, 函数,三元,与或非,基本运算
 *
 *  不能直接传的 if/for/while..语句
 *
 *
 *  列表渲染:  最终得到一个数组, 直接渲染数组. 记得加key属性(为了react底层执行效率高)
 *
 *  添加样式: 1. 行内 style属性的值,应该是一个对象. css属性名写成小驼峰, 如果值要写单位,在react中可以省略)_  2. 类名  class写成className
 *
 *  组件: 为了封装代码
 *  函数组件:  1. 组件名首字母大写  2. 必须写一个return, 返回值就是组件要渲染的结构 3. 必须要用一个根标签包裹结构
 *  类组件:  1. 组件名首字母大写 2. 必须要竭诚React.Component 3. 必须要声明render函数 4. render函数汇总必须写一个return, 返回值就是组件要渲染的结构 5. 必须要用一个根标签包裹结构
 *
 *  使用组件: <组件名/> 如果组件要写子节点,写成双标签,如果不写子节点,写单标签
 *
 *
 *
 *  组件的状态: 组件的私有数据(外部拿不到,只能在组件中使用)
 *  定义状态:
 *      class Header extends React.Component{
 *          constructor(){
 *              super()
 *              this.state = {}
 *          }
 *
 *          render(){
 *              // 获取状态
 *              return <div>{this.state.属性名}</div>
 *          }
 *
 *      }
 *
 * 给状态赋值:   this.setState({属性名: 值}) 1. 修改数据, 2. 更新了视图
 *
 *
 *
 *
 *
 *
 *
 *
 */
